import React, { useState } from 'react';
import { Plus, Calendar, MapPin, Users, Star, Eye, Edit, Trash2, X, Save, Upload } from 'lucide-react';
import { useLanguage } from '../../contexts/LanguageContext';
import { toast } from 'react-toastify';

interface Event {
  id: number;
  title: string;
  titleEn: string;
  date: string;
  time: string;
  location: string;
  locationEn: string;
  category: string;
  categoryEn: string;
  description: string;
  descriptionEn: string;
  image: string;
  capacity: number;
  registered: number;
  featured: boolean;
}

interface EventFormData {
  title: string;
  titleEn: string;
  date: string;
  time: string;
  location: string;
  locationEn: string;
  category: string;
  description: string;
  descriptionEn: string;
  capacity: number;
  featured: boolean;
  image?: File | null;
}

const EventsManagement: React.FC = () => {
  const { language } = useLanguage();
  
  const [events, setEvents] = useState<Event[]>([
    {
      id: 1,
      title: 'مؤتمر الشباب السنوي',
      titleEn: 'Annual Youth Conference',
      date: '2025-02-15',
      time: '9:00 AM',
      location: 'قاعة المؤتمرات الكبرى',
      locationEn: 'Grand Conference Hall',
      category: 'conference',
      categoryEn: 'Conference',
      description: 'مؤتمر روحي للشباب مع متحدثين مميزين وأنشطة تفاعلية',
      descriptionEn: 'Spiritual conference for youth with distinguished speakers and interactive activities',
      image: '/Images/events/youth-conference.jpg',
      capacity: 200,
      registered: 150,
      featured: true
    }
  ]);

  // Modal and form state
  const [showAddModal, setShowAddModal] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState<EventFormData>({
    title: '',
    titleEn: '',
    date: '',
    time: '',
    location: '',
    locationEn: '',
    category: 'general',
    description: '',
    descriptionEn: '',
    capacity: 50,
    featured: false,
    image: null
  });

  const eventCategories = [
    { value: 'general', label: 'عام', labelEn: 'General' },
    { value: 'conference', label: 'مؤتمر', labelEn: 'Conference' },
    { value: 'workshop', label: 'ورشة عمل', labelEn: 'Workshop' },
    { value: 'service', label: 'خدمة', labelEn: 'Service' },
    { value: 'youth', label: 'شباب', labelEn: 'Youth' },
    { value: 'children', label: 'أطفال', labelEn: 'Children' },
    { value: 'prayer', label: 'صلاة', labelEn: 'Prayer' },
    { value: 'bible-study', label: 'دراسة كتابية', labelEn: 'Bible Study' }
  ];

  const handleInputChange = (field: keyof EventFormData, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Validate file type
      if (!file.type.startsWith('image/')) {
        toast.error(
          language === 'ar' 
            ? 'يرجى اختيار ملف صورة صالح'
            : 'Please select a valid image file'
        );
        return;
      }
      
      // Validate file size (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        toast.error(
          language === 'ar' 
            ? 'حجم الصورة يجب أن يكون أقل من 5 ميجابايت'
            : 'Image size must be less than 5MB'
        );
        return;
      }
      
      setFormData(prev => ({
        ...prev,
        image: file
      }));
    }
  };

  const resetForm = () => {
    setFormData({
      title: '',
      titleEn: '',
      date: '',
      time: '',
      location: '',
      locationEn: '',
      category: 'general',
      description: '',
      descriptionEn: '',
      capacity: 50,
      featured: false,
      image: null
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validation
    if (!formData.title.trim() || !formData.titleEn.trim()) {
      toast.error(
        language === 'ar' 
          ? 'يرجى إدخال عنوان الفعالية باللغتين العربية والإنجليزية'
          : 'Please enter event title in both Arabic and English'
      );
      return;
    }

    if (!formData.date || !formData.time) {
      toast.error(
        language === 'ar' 
          ? 'يرجى تحديد تاريخ ووقت الفعالية'
          : 'Please specify event date and time'
      );
      return;
    }

    if (!formData.location.trim() || !formData.locationEn.trim()) {
      toast.error(
        language === 'ar' 
          ? 'يرجى إدخال موقع الفعالية باللغتين'
          : 'Please enter event location in both languages'
      );
      return;
    }

    setIsSubmitting(true);

    try {
      // Create new event object
      const newEvent: Event = {
        id: Date.now(), // In production, this would be generated by the backend
        title: formData.title.trim(),
        titleEn: formData.titleEn.trim(),
        date: formData.date,
        time: formData.time,
        location: formData.location.trim(),
        locationEn: formData.locationEn.trim(),
        category: formData.category,
        categoryEn: eventCategories.find(cat => cat.value === formData.category)?.labelEn || 'General',
        description: formData.description.trim(),
        descriptionEn: formData.descriptionEn.trim(),
        image: formData.image ? URL.createObjectURL(formData.image) : '/Images/hero.jpg', // In production, upload to server
        capacity: formData.capacity,
        registered: 0,
        featured: formData.featured
      };

      // Add event to the list
      setEvents(prev => [newEvent, ...prev]);
      
      // Show success message
      toast.success(
        language === 'ar' 
          ? 'تم إضافة الفعالية بنجاح'
          : 'Event added successfully'
      );

      // Reset form and close modal
      resetForm();
      setShowAddModal(false);

    } catch (error) {
      console.error('Error adding event:', error);
      toast.error(
        language === 'ar' 
          ? 'حدث خطأ أثناء إضافة الفعالية'
          : 'Error occurred while adding event'
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="space-y-8 tab-content">
      <div className="content-header">
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-8">
          <div>
            <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
              {language === 'ar' ? 'إدارة الفعاليات' : 'Events Management'}
            </h2>
            <p className="text-gray-600 dark:text-gray-300">
              {language === 'ar' ? 'إدارة وتنظيم جميع فعاليات الكنيسة' : 'Manage and organize all church events'}
            </p>
          </div>
          <div className="flex items-center space-x-4 rtl:space-x-reverse mt-4 lg:mt-0">
            <button 
              onClick={() => setShowAddModal(true)}
              className="floating-btn bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg flex items-center space-x-2 rtl:space-x-reverse shadow-lg"
            >
              <Plus className="h-5 w-5" />
              <span>{language === 'ar' ? 'إضافة فعالية جديدة' : 'Add New Event'}</span>
            </button>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {events.map((event) => (
          <div key={event.id} className="admin-card bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-xl border border-gray-200 dark:border-gray-700">
            <div className="relative">
              <img 
                src={event.image} 
                alt={language === 'ar' ? event.title : event.titleEn}
                className="w-full h-48 object-cover"
                onError={(e) => {
                  e.currentTarget.src = '/Images/hero.jpg';
                }}
              />
              {event.featured && (
                <div className="absolute top-4 left-4 bg-yellow-500 text-white px-3 py-1 rounded-full text-sm font-medium flex items-center">
                  <Star className="h-4 w-4 mr-1 rtl:ml-1 rtl:mr-0" />
                  {language === 'ar' ? 'مميز' : 'Featured'}
                </div>
              )}
            </div>
            <div className="p-6">
              <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-2">
                {language === 'ar' ? event.title : event.titleEn}
              </h3>
              <p className="text-gray-600 dark:text-gray-300 text-sm mb-4">
                {language === 'ar' ? event.description : event.descriptionEn}
              </p>
              <div className="space-y-2 text-sm text-gray-500 dark:text-gray-400 mb-4">
                <div className="flex items-center">
                  <Calendar className="h-4 w-4 mr-2 rtl:ml-2 rtl:mr-0" />
                  <span>{event.date} - {event.time}</span>
                </div>
                <div className="flex items-center">
                  <MapPin className="h-4 w-4 mr-2 rtl:ml-2 rtl:mr-0" />
                  <span>{language === 'ar' ? event.location : event.locationEn}</span>
                </div>
                <div className="flex items-center">
                  <Users className="h-4 w-4 mr-2 rtl:ml-2 rtl:mr-0" />
                  <span>{event.registered}/{event.capacity} {language === 'ar' ? 'مشارك' : 'participants'}</span>
                </div>
              </div>
              <div className="flex justify-between items-center pt-4 border-t border-gray-200 dark:border-gray-700">
                <span className="px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full text-xs font-medium">
                  {language === 'ar' ? event.category : event.categoryEn}
                </span>
                <div className="flex space-x-2 rtl:space-x-reverse">
                  <button className="p-2 text-blue-600 dark:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-colors">
                    <Eye className="h-4 w-4" />
                  </button>
                  <button className="p-2 text-green-600 dark:text-green-400 hover:bg-green-50 dark:hover:bg-green-900/20 rounded-lg transition-colors">
                    <Edit className="h-4 w-4" />
                  </button>
                  <button className="p-2 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors">
                    <Trash2 className="h-4 w-4" />
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Add Event Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <div className="sticky top-0 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4 flex items-center justify-between">
              <h3 className="text-xl font-bold text-gray-900 dark:text-white">
                {language === 'ar' ? 'إضافة فعالية جديدة' : 'Add New Event'}
              </h3>
              <button
                onClick={() => {
                  setShowAddModal(false);
                  resetForm();
                }}
                className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
              >
                <X className="h-5 w-5 text-gray-500" />
              </button>
            </div>

            <form onSubmit={handleSubmit} className="p-6 space-y-6">
              {/* Title Fields */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    {language === 'ar' ? 'العنوان (عربي) *' : 'Title (Arabic) *'}
                  </label>
                  <input
                    type="text"
                    value={formData.title}
                    onChange={(e) => handleInputChange('title', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                    placeholder={language === 'ar' ? 'أدخل العنوان بالعربية' : 'Enter title in Arabic'}
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    {language === 'ar' ? 'العنوان (إنجليزي) *' : 'Title (English) *'}
                  </label>
                  <input
                    type="text"
                    value={formData.titleEn}
                    onChange={(e) => handleInputChange('titleEn', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                    placeholder={language === 'ar' ? 'أدخل العنوان بالإنجليزية' : 'Enter title in English'}
                    required
                  />
                </div>
              </div>

              {/* Date and Time */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    {language === 'ar' ? 'التاريخ *' : 'Date *'}
                  </label>
                  <input
                    type="date"
                    value={formData.date}
                    onChange={(e) => handleInputChange('date', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    {language === 'ar' ? 'الوقت *' : 'Time *'}
                  </label>
                  <input
                    type="time"
                    value={formData.time}
                    onChange={(e) => handleInputChange('time', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    {language === 'ar' ? 'السعة' : 'Capacity'}
                  </label>
                  <input
                    type="number"
                    min="1"
                    value={formData.capacity}
                    onChange={(e) => handleInputChange('capacity', parseInt(e.target.value) || 50)}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                  />
                </div>
              </div>

              {/* Location Fields */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    {language === 'ar' ? 'الموقع (عربي) *' : 'Location (Arabic) *'}
                  </label>
                  <input
                    type="text"
                    value={formData.location}
                    onChange={(e) => handleInputChange('location', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                    placeholder={language === 'ar' ? 'أدخل الموقع بالعربية' : 'Enter location in Arabic'}
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    {language === 'ar' ? 'الموقع (إنجليزي) *' : 'Location (English) *'}
                  </label>
                  <input
                    type="text"
                    value={formData.locationEn}
                    onChange={(e) => handleInputChange('locationEn', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                    placeholder={language === 'ar' ? 'أدخل الموقع بالإنجليزية' : 'Enter location in English'}
                    required
                  />
                </div>
              </div>

              {/* Category and Featured */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    {language === 'ar' ? 'الفئة' : 'Category'}
                  </label>
                  <select
                    value={formData.category}
                    onChange={(e) => handleInputChange('category', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                  >
                    {eventCategories.map((category) => (
                      <option key={category.value} value={category.value}>
                        {language === 'ar' ? category.label : category.labelEn}
                      </option>
                    ))}
                  </select>
                </div>
                <div className="flex items-center">
                  <input
                    type="checkbox"
                    id="featured"
                    checked={formData.featured}
                    onChange={(e) => handleInputChange('featured', e.target.checked)}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  />
                  <label htmlFor="featured" className="mr-2 rtl:ml-2 rtl:mr-0 block text-sm text-gray-700 dark:text-gray-300">
                    {language === 'ar' ? 'فعالية مميزة' : 'Featured Event'}
                  </label>
                </div>
              </div>

              {/* Description Fields */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    {language === 'ar' ? 'الوصف (عربي)' : 'Description (Arabic)'}
                  </label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    rows={4}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                    placeholder={language === 'ar' ? 'أدخل وصف الفعالية بالعربية' : 'Enter event description in Arabic'}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    {language === 'ar' ? 'الوصف (إنجليزي)' : 'Description (English)'}
                  </label>
                  <textarea
                    value={formData.descriptionEn}
                    onChange={(e) => handleInputChange('descriptionEn', e.target.value)}
                    rows={4}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                    placeholder={language === 'ar' ? 'أدخل وصف الفعالية بالإنجليزية' : 'Enter event description in English'}
                  />
                </div>
              </div>

              {/* Image Upload */}
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  {language === 'ar' ? 'صورة الفعالية' : 'Event Image'}
                </label>
                <div className="flex items-center justify-center w-full">
                  <label className="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600">
                    <div className="flex flex-col items-center justify-center pt-5 pb-6">
                      <Upload className="w-8 h-8 mb-4 text-gray-500 dark:text-gray-400" />
                      <p className="mb-2 text-sm text-gray-500 dark:text-gray-400">
                        <span className="font-semibold">
                          {language === 'ar' ? 'انقر لرفع صورة' : 'Click to upload'}
                        </span>
                      </p>
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        PNG, JPG {language === 'ar' ? 'أو' : 'or'} GIF ({language === 'ar' ? 'الحد الأقصى' : 'MAX'} 5MB)
                      </p>
                    </div>
                    <input
                      type="file"
                      className="hidden"
                      accept="image/*"
                      onChange={handleImageChange}
                    />
                  </label>
                </div>
                {formData.image && (
                  <p className="mt-2 text-sm text-green-600 dark:text-green-400">
                    {language === 'ar' ? 'تم اختيار الصورة:' : 'Selected image:'} {formData.image.name}
                  </p>
                )}
              </div>

              {/* Form Actions */}
              <div className="flex justify-end space-x-4 rtl:space-x-reverse pt-6 border-t border-gray-200 dark:border-gray-700">
                <button
                  type="button"
                  onClick={() => {
                    setShowAddModal(false);
                    resetForm();
                  }}
                  className="px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                >
                  {language === 'ar' ? 'إلغاء' : 'Cancel'}
                </button>
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="px-6 py-3 bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white rounded-lg flex items-center space-x-2 rtl:space-x-reverse transition-colors"
                >
                  {isSubmitting ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      <span>{language === 'ar' ? 'جاري الحفظ...' : 'Saving...'}</span>
                    </>
                  ) : (
                    <>
                      <Save className="h-4 w-4" />
                      <span>{language === 'ar' ? 'حفظ الفعالية' : 'Save Event'}</span>
                    </>
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default EventsManagement;